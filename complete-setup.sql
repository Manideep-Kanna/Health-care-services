-- Enable RLS
alter table public.appointment_types enable row level security;
alter table public.time_slots enable row level security;
alter table public.appointments enable row level security;

-- Create appointment_types table
create table if not exists public.appointment_types (
    id bigint generated by default as identity primary key,
    name text not null,
    duration integer not null,
    price decimal(10,2) not null,
    doctor_name text not null,
    doctor_specialization text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create time_slots table
create table if not exists public.time_slots (
    id bigint generated by default as identity primary key,
    start_time timestamp with time zone not null,
    date date not null,
    is_available boolean default true,
    appointment_type_id bigint references public.appointment_types(id),
    doctor_id uuid not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create appointments table
create table if not exists public.appointments (
    id bigint generated by default as identity primary key,
    patient_id uuid references auth.users(id),
    doctor_id uuid not null,
    appointment_type_id bigint references public.appointment_types(id),
    time_slot_id bigint references public.time_slots(id),
    start_time timestamp with time zone not null,
    status text check (status in ('upcoming', 'completed', 'cancelled')) default 'upcoming',
    notes text default '',
    location text not null,
    meeting_url text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create medical_records table
create table if not exists public.medical_records (
    id uuid default gen_random_uuid() primary key,
    patient_id uuid references auth.users(id),
    doctor_id uuid references auth.users(id),
    file_name text not null,
    file_path text not null,
    file_type text not null,
    file_size bigint not null,
    type text not null,
    description text not null,
    uploaded_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create storage bucket for medical records
insert into storage.buckets (id, name, public) 
values ('medical-records', 'medical-records', false);

-- RLS Policies

-- Appointment Types policies
create policy "Enable read access for all users"
on public.appointment_types for select
using (true);

-- Time Slots policies
create policy "Enable read access for available slots"
on public.time_slots for select
using (is_available = true);

-- Appointments policies
create policy "Enable read access for own appointments"
on public.appointments for select
using (auth.uid() = patient_id);

create policy "Enable insert access for own appointments"
on public.appointments for insert
with check (auth.uid() = patient_id);

-- Medical Records policies
create policy "Enable read access for own medical records"
on public.medical_records for select
using (auth.uid() = patient_id);

create policy "Enable insert access for own medical records"
on public.medical_records for insert
with check (auth.uid() = patient_id);

-- Storage policies
create policy "Give users access to own folder"
on storage.objects for select
using (bucket_id = 'medical-records' and auth.uid()::text = (storage.foldername(name))[1]);

create policy "Allow users to upload files to own folder"
on storage.objects for insert
with check (
    bucket_id = 'medical-records' 
    and auth.uid()::text = (storage.foldername(name))[1]
);

-- Indexes
create index if not exists idx_time_slots_date on public.time_slots(date);
create index if not exists idx_time_slots_availability on public.time_slots(is_available);
create index if not exists idx_appointments_patient on public.appointments(patient_id);
create index if not exists idx_appointments_status on public.appointments(status);
create index if not exists idx_medical_records_patient on public.medical_records(patient_id);

-- Sample Data

-- Add sample doctors
insert into auth.users (id, email, role) values
    ('d1b23c45-6789-4a0b-b1c2-3d4e5f6a7b8c', 'dr.smith@example.com', 'doctor'),
    ('e2c34d56-789a-5b1c-c2d3-4e5f6a7b8c9d', 'dr.jones@example.com', 'doctor');

-- Add appointment types
insert into public.appointment_types (id, name, duration, price, doctor_name, doctor_specialization) values
    (1, 'General Consultation', 30, 100.00, 'Dr. Smith', 'General Medicine'),
    (2, 'Follow-up Visit', 20, 75.00, 'Dr. Smith', 'General Medicine'),
    (3, 'Specialist Consultation', 45, 150.00, 'Dr. Jones', 'Cardiology');

-- Add time slots for next 7 days
with dates as (
    select generate_series(
        current_date,
        current_date + interval '7 days',
        interval '1 day'
    )::date as slot_date
),
times as (
    select generate_series(
        '09:00:00'::time,
        '16:00:00'::time,
        '30 minutes'::interval
    ) as slot_time
)
insert into public.time_slots (start_time, date, is_available, appointment_type_id, doctor_id)
select 
    (d.slot_date + t.slot_time)::timestamp with time zone,
    d.slot_date,
    true,
    case 
        when extract(hour from t.slot_time) < 12 then 1
        when extract(hour from t.slot_time) < 14 then 2
        else 3
    end,
    case 
        when extract(hour from t.slot_time) < 14 then 'd1b23c45-6789-4a0b-b1c2-3d4e5f6a7b8c'
        else 'e2c34d56-789a-5b1c-c2d3-4e5f6a7b8c9d'
    end
from dates d
cross join times t
where extract(dow from d.slot_date) between 1 and 5; -- Monday to Friday only

-- Enable email signups in auth.config
update auth.config set enable_signup = true;